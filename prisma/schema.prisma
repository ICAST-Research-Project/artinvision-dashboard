generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  MUSEUM_ADMIN
  CURATOR
  ARTIST
}

model User {
  id            String      @id @default(cuid())
  name          String?
  phone         String
  email         String      @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accountType   AccountType

  museumAdmin MuseumAdmin?
  curator     Curator?
  artist      Artist?

  artworks Artwork[] @relation("UserArtworks")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MuseumAdmin {
  id         String       @id @default(cuid())
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String       @unique
  museumName String
  about      String
  address    String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  collection Collection[]
}

model Curator {
  id         String       @id @default(cuid())
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String       @unique
  address    String
  about      String
  connect    String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  collection Collection[]
}

model Artist {
  id String @id @default(cuid())

  name      String
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @unique
  address   String?
  bio       String
  connect   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  artworks            Artwork[]
  ArtistEmbeddingText ArtistEmbeddingText?
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  artworks Artwork[]
}

model Artwork {
  id          String @id @default(cuid())
  title       String @db.VarChar(100)
  description String

  images     ArtworkImage[]
  category   Category       @relation(fields: [categoryId], references: [id])
  categoryId String
  published  Boolean        @default(true)

  createdBy   User        @relation("UserArtworks", fields: [createdById], references: [id], onDelete: Cascade)
  createdById String
  creatorType AccountType

  artworkLinks CollectionArtwork[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  artistRel             Artist?                 @relation(fields: [artistId], references: [id])
  artistId              String
  ArtworkEmbeddingText  ArtworkEmbeddingText?
  ArtworkEmbeddingImage ArtworkEmbeddingImage?
  ArtworkImageEmbedding ArtworkImageEmbedding[]

  @@index([artistId])
  @@index([categoryId])
  @@index([published])
}

model ArtworkImage {
  id                    String                  @id @default(cuid())
  url                   String
  artwork               Artwork                 @relation(fields: [artworkId], references: [id], onDelete: Cascade)
  artworkId             String
  ArtworkImageEmbedding ArtworkImageEmbedding[]

  @@index([artworkId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

enum CollectionStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

model Collection {
  id            String              @id @default(cuid())
  name          String
  about         String
  museumAdmin   MuseumAdmin         @relation(fields: [museumAdminId], references: [id])
  museumAdminId String
  curator       Curator             @relation(fields: [curatorId], references: [id])
  curatorId     String
  artworkLinks  CollectionArtwork[]
  status        CollectionStatus    @default(PENDING)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
}

model CollectionArtwork {
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String
  artwork      Artwork    @relation(fields: [artworkId], references: [id])
  artworkId    String

  @@id([collectionId, artworkId])
  @@index([artworkId])
}

model ArtworkEmbeddingText {
  artworkId String  @id @map("artwork_id")
  artwork   Artwork @relation(fields: [artworkId], references: [id], onDelete: Cascade)
  model     String

  embedding Unsupported("vector")
  createdAt DateTime              @default(now()) @map("created_at")
  updatedAt DateTime              @updatedAt @map("updated_at")

  @@map("artwork_embeddings_text")
}

model ArtworkEmbeddingImage {
  artworkId String                @id @map("artwork_id")
  artwork   Artwork               @relation(fields: [artworkId], references: [id], onDelete: Cascade)
  model     String
  embedding Unsupported("vector")
  createdAt DateTime              @default(now()) @map("created_at")
  updatedAt DateTime              @updatedAt @map("updated_at")

  @@map("artwork_embeddings_image")
}

// For the new image embeddign table
model ArtworkImageEmbedding {
  artworkImageId String                 @id @map("artwork_image_id")
  artworkId      String                 @map("artwork_id")
  model          String
  embedding      Unsupported("vector")?
  createdAt      DateTime               @default(now()) @map("created_at")
  updatedAt      DateTime               @updatedAt @map("updated_at")

  artworkImage ArtworkImage @relation(fields: [artworkImageId], references: [id], onDelete: Cascade)
  artwork      Artwork      @relation(fields: [artworkId], references: [id], onDelete: Cascade)

  @@index([artworkId], map: "artwork_image_embeddings_artwork_id_idx")
  @@map("artwork_image_embeddings")
}

// 

model ArtistEmbeddingText {
  artistId  String                @id @map("artist_id")
  artist    Artist                @relation(fields: [artistId], references: [id], onDelete: Cascade)
  model     String
  embedding Unsupported("vector")
  createdAt DateTime              @default(now()) @map("created_at")
  updatedAt DateTime              @updatedAt @map("updated_at")

  @@map("artist_embeddings_text")
}
